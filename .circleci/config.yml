# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/php:7.4
        auth:
          username: mrblog
          password: $DOCKERHUB_PASSWORD
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: test_data
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_PASSWORD:
      - image: circleci/mysql:8.0
        auth:
          username: mrblog
          password: $DOCKERHUB_PASSWORD
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin --innodb-large-prefix=true --innodb-file-format=Barracuda
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      # - run: sudo apt-get install -y libpng-dev default-mysql-client libcurl4-gnutls-dev
      # - run: sudo docker-php-ext-install zip pdo pdo_mysql curl gd bcmath

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      - run: ./vendor/bin/phplint ./ --exclude=vendor

      - run:
          name: Mysql database
          command: mysql  -h 127.0.0.1 -u root < ./db/testdata.sql


      # run UNIT tests with phpunit
      - run: cp .circleci/.env .
      - run: cp .circleci/phpunit.xml .
      - run: mkdir -p test-results/phpunit
      - run: ./vendor/bin/phpunit --log-junit test-results/phpunit/report.xml tests

      - store_test_results:
          path: test-results

